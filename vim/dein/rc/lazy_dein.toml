########################################
# ファイラー
########################################

## Defx
    [[plugins]]
      repo = 'Shougo/defx.nvim'
      # depends = ['defx-git', 'defx-icons']
      hook_add = '''
        nnoremap <silent> <Leader>e :<C-u>Defx -auto-cd -toggle -resume -columns=mark:indent:icon:filename:type:size:time -split=vertical -winwidth=35<CR>

        autocmd FileType defx call s:defx_my_settings()
          function! s:defx_my_settings() abort
            " Define mappings
            nnoremap <silent><buffer><expr> <CR> defx#is_directory() ?
              \ defx#do_action('open_directory') :
              \ defx#do_action('multi', ['drop', 'quit'])

            nnoremap <silent><buffer><expr> s defx#do_action('open', 'vsplit')
            nnoremap <silent><buffer><expr> o defx#is_directory() ?
              \ defx#do_action('open_or_close_tree') :
              \ defx#do_action('multi', ['drop', 'quit'])
            nnoremap <silent><buffer><expr> O defx#do_action('open_tree_recursive')
            nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
            nnoremap <silent><buffer><expr> H defx#do_action('change_vim_cwd')

            nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
            nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
            nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
            nnoremap <silent><buffer><expr> l defx#is_directory() ?
              \ defx#do_action('open') :
              \ defx#do_action('multi', ['drop', 'quit'])

            nnoremap <silent><buffer><expr> r defx#do_action('redraw')
            nnoremap <silent><buffer><expr> q defx#do_action('quit')

            nnoremap <silent><buffer><expr> ST defx#do_action('toggle_sort', 'time')
            nnoremap <silent><buffer><expr> SS defx#do_action('toggle_sort', 'size')
            nnoremap <silent><buffer><expr> I defx#do_action('toggle_ignored_files')

            nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')

            nnoremap <silent><buffer><expr> Y defx#do_action('copy')
            nnoremap <silent><buffer><expr> X defx#do_action('move')
            nnoremap <silent><buffer><expr> P defx#do_action('paste')
            nnoremap <silent><buffer><expr> DD defx#do_action('remove')
            nnoremap <silent><buffer><expr> R defx#do_action('rename')

            nnoremap <silent><buffer><expr> F defx#do_action('new_directory')
            nnoremap <silent><buffer><expr> N defx#do_action('new_file')
            nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')

            nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
            nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')

            nnoremap <silent><buffer><expr> i defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
            nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
            nnoremap <silent><buffer><expr> ; defx#do_action('repeat')

            nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
            nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
          endfunction
    '''

########################################
# パッケージ管理ツール
########################################

## git管理
  [[plugins]]
    repo = "airblade/vim-gitgutter"
    on_event = 'BufRead'
    hook_source = '''
      let g:gitgutter_enabled = 1
      autocmd BufWritePost,BufEnter * GitGutter
    '''

  [[plugins]]
    repo = 'tpope/vim-fugitive'
    on_event = 'BufReadPre'
    hook_add = '''
      nnoremap <silent> <Leader>gs :Git status<CR>
      nnoremap <silent> <Leader>gb :Git blame<CR>
      nnoremap <silent> <Leader>gd :Gdiffsplit<CR>
      nnoremap <silent> <Leader>gps :Gpush<CR>
      nnoremap <silent> <Leader>gpl :Gpull<CR>
    '''




########################################
# シンタックスに関するプラグイン
########################################

## TOML
  [[plugins]]
    repo = 'cespare/vim-toml'
    on_ft = ['toml']

### Coffee Script
#  [[plugins]]
#    repo = 'kchmck/vim-coffee-script'
#    on_ft = ['coffee']

## Kotlin
  [[plugins]]
    repo = 'udalov/kotlin-vim'
    on_ft = ['kotlin']

## Terraform
  [[plugins]]
    repo = 'hashivim/vim-terraform'
    on_ft = ['terraform']

########################################
# エディタに関するプラグイン
########################################

## 文末のスペースを赤く表示
  [[plugins]]
  repo = 'bronson/vim-trailing-whitespace'
  hook_source = '''
    let g:extra_whitespace_ignored_filetypes = ['defx']
  '''

## コメントアウト
  [[plugins]]
    repo = 'tomtom/tcomment_vim'
    hook_source = '''
      let g:tcomment_mapleader1 = '<C-/>'
      let g:tcomment_opleader1 = 'gc'
      let g:tcomment_opleader2 = 'gC'
    '''

#  [[plugins]]
#    repo = 'tpope/vim-commentary'

## 検索結果の件数を表示
  [[plugins]]
    repo = 'osyo-manga/vim-anzu'

## vim の f search がわかりやすくなる
  [[plugins]]
    repo = 'rhysd/clever-f.vim'


########################################
# 入力補完に関するプラグイン
########################################

# Node.js のバージョンを上げないと coc が使えない
### LSP
#  [[plugins]]
#    repo = 'neoclide/coc.nvim'
#    merge = 0
#    rev = 'release'
#


########################################
# AI コーディング支援
########################################

## GitHub Copilot
  [[plugins]]
    repo = 'github/copilot.vim'
    on_event = 'InsertEnter'
    hook_add = '''
      let g:copilot_filetypes = {
      \ 'gitcommit': v:true,
      \ 'markdown': v:true,
      \ 'yaml': v:true,
      \ 'toml': v:true,
      \ 'plaintext': v:false,
      \ }
    '''

